class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int>  m;
        for(const auto& w : words){
            m[w]++;
        }
        typedef pair<string, int> Node;
        auto cmp = [](Node& a, Node& b){
            if(a.second == b.second) return a.first < b.first;
            return a.second > b.second;
        };
        priority_queue<Node, vector<Node>, decltype(cmp)> q(cmp);
        for(const auto& i : m){
            q.push(i);
            if(q.size() > k){
                q.pop();
            }
        }
        
        vector<string> res;
        while(q.size()){
            res.push_back(q.top().first);
            q.pop();
        }
        std::reverse(res.begin(), res.end());
        return res;
    }
};
