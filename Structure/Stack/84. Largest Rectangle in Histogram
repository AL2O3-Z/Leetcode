front sentinel : -1 at the botton of stack
end sentinel : height of 0 at the end of heights;
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        int n = heights.size();
        stack<int> s;
        s.push(-1);
        int res = 0;
        for (int i = 0; i < heights.size(); i++) {
            while (s.top() != -1 && heights[s.top()] >= heights[i]) {
                int h = heights[s.top()]; s.pop();
                int left = s.top();
                res = max(res, h * (i - left - 1));
            }
            s.push(i);
        }
        return res;
    }
};
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> s;
        //s.push(-1);
        vector<int> left(n, -1), right(n, n);
        for (int i = 0; i < heights.size(); i++) {
            while (!s.empty() && heights[s.top()] >= heights[i]) {
                right[s.top()] = i;
                s.pop();
            }
            if (!s.empty()) left[i] = s.top();
            s.push(i);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, (right[i] - left[i] - 1) * heights[i]);
        }
        return res;
    }
};
