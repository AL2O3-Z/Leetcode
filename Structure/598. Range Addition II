Time O(m * n * ops.size()) TLE
int maxCount(int m, int n, vector<vector<int>>& ops) {
        int maxV = 0;
        int count = 0;
        if(ops.size() == 0) return m * n;
        vector<vector<int>> M(m, vector<int>(n, 0));
        for(vector<int> o : ops){
            for(int i = 0; i < o[0]; i++){
                for(int j = 0; j < o[1]; j++){
                    M[i][j]++;
                    if(M[i][j] > maxV){
                        maxV = M[i][j];
                        count = 1;
                    }else if(M[i][j] == maxV){
                        count ++;
                    }
                }
            }
        }
        return count;
}
//Time O(ops.size())
int maxCount(int m, int n, vector<vector<int>>& ops) {
        int row = INT_MAX, col = INT_MAX;
        if(ops.size() == 0) return m * n;
        for(vector<int> o : ops){
            row = min(row, o[0]);
            col = min(col, o[1]);
        }
        return row * col;
}
