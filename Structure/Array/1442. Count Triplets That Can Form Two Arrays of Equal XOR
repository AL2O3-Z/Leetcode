ime O(n^2) prefix-sum + proriety of XOR
class Solution {
public:
    int countTriplets(vector<int>& arr) {
        const int n = arr.size();    
        int ans = 0;
        vector<int> xors(n + 1);
        for (int i = 0; i < n; ++i)
          xors[i + 1] = xors[i] ^ arr[i];
        for (int i = 0; i < n; ++i)
          for (int k = i + 1; k < n; ++k)
            if (xors[k + 1] == xors[i]) 
              ans += k - i;
        return ans;
     }
};
//Time O(n^3)
class Solution {
public:
  int countTriplets(vector<int>& arr) {
    const int n = arr.size();    
    int ans = 0;
    vector<int> xors(n + 1);
    for (int i = 0; i < n; ++i)
      xors[i + 1] = xors[i] ^ arr[i];
    for (int i = 0; i < n; ++i)
      for (int j = i + 1; j < n; ++j)
        for (int k = j; k < n; ++k) {
          const int a = xors[j] ^ xors[i];
          const int b = xors[k + 1] ^ xors[j];         
          if (a == b) ++ans;
        }
    return ans;
  }
};
//Time O(n) + hash map
class Solution {
public:
  int countTriplets(vector<int>& arr) {
    const int n = arr.size();    
    int ans = 0;
    unordered_map<int, int> freq{{0, 1}};    
    unordered_map<int, int> sum;
    int X = 0;
    for (int i = 0; i < n; ++i) {
      X ^= arr[i];
      ans += freq[X] * i - sum[X];
      ++freq[X];
      sum[X] += i + 1;
    }
    return ans;
  }
};
