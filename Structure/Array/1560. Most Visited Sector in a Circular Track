O(n)
We only need to care the start point and the end point.

                s ----- n
1 --------------------- n
1 --------------------- n
1 ----- e

Explanation
If start <= end, return the range [start, end].
If end < start, return the range [1, end] + range [start, n].
class Solution {
public:
    vector<int> mostVisited(int n, vector<int>& A) {
        vector<int> res;
        for (int i = A[0]; i <= A[A.size() - 1]; ++i)
            res.push_back(i);
        if (res.size() > 0) return res;
        for (int i = 1; i <= A[A.size() - 1]; ++i)
            res.push_back(i);
        for (int i = A[0]; i <= n; ++i)
            res.push_back(i);
        return res;
    }
};

O(n^2)
class Solution {
public:
    vector<int> mostVisited(int n, vector<int>& rounds) {
        vector<int> cnt(n + 1);
        int idx = 0;
        while (idx < rounds.size() - 1) {
            int cur = rounds[idx];
            while ((cur % (n + 1)) != rounds[idx + 1]) {
                cnt[cur % (n + 1)]++;
                cur++;
            }
            idx++;
        }
        cnt[rounds.back()]++;
        vector<int> res;
        int count = INT_MIN;
        for (int i = 1; i < cnt.size(); i++) {
            if (cnt[i] < count) continue;
            if (cnt[i] > count) {
                res.clear();
                count = cnt[i];
            }
            res.push_back(i);
        }
        return res;
    }
};
