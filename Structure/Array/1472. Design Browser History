class BrowserHistory {
public:
    BrowserHistory(string homepage) {
        his.push_back(homepage);
        cur = 1;
    }
    
    void visit(string url) {
        while(his.size() - 1 > cur){
            his.pop_back();
        }
        //his.resize(cur);
        his.push_back(url);
        cur = his.size() - 1;
    }
    
    string back(int steps) {
        cur = cur - steps <= 0 ? 0 : cur - steps;
        return his[cur];
        
    }
    
    string forward(int steps) {
        cur = steps + cur >= his.size() - 1 ? his.size() - 1 : steps + cur;
        return his[cur];
    }
private :
    vector<string> his;
    int cur ;
};
//stack
//Two stacks (first solution) are natural fit for this problem
stack<string> h_back, h_forward;
string cur;
BrowserHistory(string homepage) { cur = homepage; }
void visit(string url) {
    h_forward = stack<string>();
    h_back.push(cur);
    cur = url;
}
string back(int steps) {
    while (--steps >= 0 && !h_back.empty()) {
        h_forward.push(cur);
        cur = h_back.top();
        h_back.pop();
    }
    return cur;
}
string forward(int steps) {
    while (--steps >= 0 && !h_forward.empty()) {
        h_back.push(cur);
        cur = h_forward.top();
        h_forward.pop();
    }
    return cur;
}
