class Solution {
    public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        int rest = target;
        vector<int> cur;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0, cur, res);
        return res;
    }
    void dfs(vector<int>& candidates, int target, int index, vector<int>& cur, vector<vector<int>>& res) {
        if(target == 0) {
            res.push_back(cur);
        }
        //not allow horizontal and allow in vertical.
        for(int j = index; j < candidates.size(); j++) {
            int i = candidates[j];
            if(target - i < 0) break;
            if(j && candidates[j] == candidates[j - 1] && j > index) continue;
            cur.push_back(i);
            dfs(candidates, target - i, j + 1, cur, res);
            cur.pop_back();
        }
    }
};
