//general solution
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> sum(m + 1, vector(n + 1, 0));
        int res = 0;
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                sum[i][j] = matrix[i - 1][j - 1] - '0' 
                            + sum[i - 1][j] 
                            + sum[i][j - 1] 
                            - sum[i - 1][j - 1];
            }
        }
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++) {
                for(int k = min(m + 1 - i, n + 1 - j); k > 0; k--){
                    int size = sum[i + k - 1][j + k - 1] 
                            - sum[i - 1][j + k - 1]
                            - sum[i + k - 1][j - 1]
                            + sum[i - 1][j - 1];
                    if(size == k * k){
                        res = max(res, size);
                        break;
                    } 
                }
            }
        }
        return res;
    }
};
//more efficase
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n , 0));
        int res = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                dp[i][j] = matrix[i][j] - '0';
                if(dp[i][j] == 0) continue;
                else {
                    if(i == 0 || j == 0) {}
                    else {
                        dp[i][j] = min(dp[i - 1][j], min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;
                    }
                }
                res = max(res, dp[i][j] * dp[i][j]);
            }
        }
        return res;
    }
};
