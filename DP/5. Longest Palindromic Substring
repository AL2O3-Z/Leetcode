string longestPalindrome(string s) {
        int n = s.length();
        if(!n) return "";
        if(n == 1) return s;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        dp[n-1][n-1] = 1;
        for(int i = 0; i < n-1; i++){
            dp[i][i] = 1;
            dp[i][i+1] = s[i] == s[i+1];
        }
        for(int i = n-3; i >= 0; --i){
            for(int j = i + 2; j < n; j++){
                dp[i][j] = dp[i+1][j-1] & (s[i] == s[j]);
            }
        }
        int maxL = 0;
        string str = "";
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                if(dp[i][j] == 1){
                    if(j - i + 1 > maxL){
                        maxL = j - i + 1;
                        str = s.substr(i, j - i + 1);
                    }
                }
            }
        }
        return str;
    }
