//o(nlogn) DP + Binary search
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        vector<int> odd(n, 0), even(n, 0);
        odd[n - 1] = 1, even[n - 1] = 1;
        map<int, int> m;
        m[A[n - 1]] = n - 1;
        int res = 1;
        for (int i = n - 2; i >= 0; i--) {
            auto o = m.lower_bound(A[i]);
            if (o != m.end()) res += odd[i] = even[o->second];
            auto e = m.upper_bound(A[i]);
            if (e != m.begin()) even[i] = odd[prev(e)->second];
            m[A[i]] = i;
        }
        return res;
    }
};

O(nlogn) DFS + Memorization + Binary search
class Solution {
public:
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        vector<int> even(n, -1), odd(n, -1);
        map<int,int> m;
        m[A[n - 1]] = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            auto o = m.lower_bound(A[i]);
            if (o != m.end()) odd[i] = o->second;
            auto e = m.upper_bound(A[i]);
            if (e != m.begin()) even[i] = prev(e)->second;
            m[A[i]] = i;
        }
        vector<int> oddPath(n, -1), evenPath(n, -1);
        function<int(int, int)> dfs = [&] (int cur, int cnt) {
            if (cur == -1)  return 0;
            if (cur == n - 1) return 1;
            if(!(cnt % 2) && oddPath[cur] != -1) return oddPath[cur];
            else if ((cnt % 2) && evenPath[cur] != -1) return evenPath[cur];
            
            int nxt;
            if ((cnt % 2)) nxt = even[cur];
            else nxt = odd[cur];
            
            cnt++;
            int res = dfs(nxt, cnt);
            cnt--;
            
            if (cnt % 2) evenPath[cur] = res;
            else oddPath[cur] = res;
            return res;
        };
        int res = 0;
        for (int i = 0; i < n - 1; i ++) {
            int cnt = 0;
            int cur = i;
            if (dfs(cur, cnt)) res ++;
            
        }
        return res + 1;
    }
};
