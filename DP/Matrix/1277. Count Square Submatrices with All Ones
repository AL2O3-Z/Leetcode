//Runtime: 140 ms
//Memory Usage: 26.3 MB
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        if(matrix.empty() || matrix[0].empty()) return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        int res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            dp[i][0] = matrix[i][0];
            res += dp[i][0];
        }
            
        for(int j = 0; j < n; j++){
            dp[0][j] = matrix[0][j];
            res += dp[0][j];
        }
        res -=dp[0][0];
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(matrix[i][j] == 0) dp[i][j] = 0;
                else dp[i][j] = min(min(dp[i][j-1], dp[i-1][j]), dp[i-1][j-1]) + 1;
                res += dp[i][j];
            }
        }
        return res;
    }
};
//Runtime: 1552 ms
//Memory Usage: 26.4 MB
class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int res = 0;
        if(!m) return res;
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for(int i = 1; i < m+1; i++){
            for(int j = 1; j < n+1; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] +matrix[i-1][j-1];
                if(matrix[i-1][j-1] == 1) res++;
                for(int l = 2; l <= min(i,j); l++){
                    int all = l*l;
                    if(dp[i][j] - dp[i][j-l] - dp[i-l][j] + dp[i-l][j-l] == all) res++;
                }
            }
        }
        return res;
    }
};
