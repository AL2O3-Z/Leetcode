//Time O(n^2)
//固定一个数字，在剩下的数组中找到两数之和等于这个数的相反数，用双指针可以可以使两数之和的query复杂度为O(n)
//另一个难点，在于不重复，每当遇到当前元素与上一个遍历到的值相同，则跳过，外层循环和内层双指针的while同理。
//要与已知的数字进行比较，再决定是否跳过，否则就是死循环或者丢失数据 如[-2,0,1,1,1,1,1,1,1,1,1,2]
vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.size() < 3) return res;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; i++){
            int lock = nums[i];
            if(i - 1 >= 0 && nums[i] == nums[i-1]) continue; 
            int l = i + 1;
            int r = nums.size()-1;
            while(l < r){
                if(nums[l] + nums[r] < -lock){
                    l++;
                    while(l < r && nums[l] == nums[l - 1]) l++;
                }else if(nums[l] + nums[r] > -lock){
                    r--;
                    while(l < r && nums[r] == nums[r + 1]) r--;
                }else{
                    res.push_back({nums[i], nums[l], nums[r]});
                    l++;
                    r--;
                    while(l < r && nums[l] == nums[l - 1]) l++;
                    while(l < r && nums[r] == nums[r + 1]) r--;
                    
                }
                
            } 
        }
        return res;
    }
