//DFS
void solve(vector<vector<char>>& board) {
        int r = board.size(); 
        if(r == 0) return;
        int c = board[0].size();
        
        for(int i = 0; i < r; i++){
            check(board, i, 0);
            check(board, i, c-1);
        }
        for(int j = 0; j < c; j++){
            check(board, 0, j);
            check(board, r-1, j);
        }
        for(int i = 0; i < r; i ++){
            for(int j = 0; j < c; j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if(board[i][j] == '1') board[i][j] = 'O';
            }
        }
        return;
    }
    void check(vector<vector<char>>& board, int i, int j){
        int r = board.size();
        int c = board[0].size();
        if(board[i][j] == 'O'){
            board[i][j] = '1';
            if(i > 1) check(board, i-1, j);
            if(i + 1 < r) check(board, i + 1, j);
            if(j > 1) check(board, i, j - 1);
            if(j + 1 < c) check(board,i, j + 1);
        }
    }
//BFS
void solve(vector<vector<char>>& board) {
        int r = board.size();
        if(r == 0) return;
        int c = board[0].size();
        for(int i = 0; i < r; i++){
            if(board[i][0] == 'O') helper(board, i, 0);
            if(board[i][c-1] == 'O') helper(board, i, c-1);
        }
        for(int i = 0; i < c; i++){
            if(board[0][i] == 'O') helper(board, 0, i);
            if(board[r-1][i] == 'O') helper(board, r-1, i);
        }
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if( board[i][j] == '1') board[i][j] = 'O';
            }
        }
    }
    void helper(vector<vector<char>>& board, int i, int j){
        int r = board.size();
        int c = board[0].size();
        queue<pair<int,int>> q;
        q.push({i,j});
        while(!q.empty()){
            auto cur = q.front(); q.pop();
            int x = cur.first;
            int y = cur.second;
            if(board[x][y] == 'O'){
                board[x][y] = '1';
                if(x > 1) q.push({x-1,y});
                if(y > 1) q.push({x, y-1});
                if(x + 1 < r) q.push({x + 1, y});
                if(y + 1 < c) q.push({x, y + 1});
            }
            
        }
    }
