class Solution {
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        if(bloomDay.size() < m * k) return -1;
         vector<int> days(bloomDay);
        sort(days.begin(), days.end());
        int l = 0; int r = days.size();
        while(l < r){
            int mid = l + (r - l) / 2;
            bool can = canFlower(bloomDay, m, k, days[mid]);
            if(can){
                r = mid;
            }else {
                l = mid + 1;
            }
        }
        return days[l];
    }
    bool canFlower(vector<int>& bloomDay, int m, int k, int mid){
        int total = 0; int count_bouquet = 0;
        for(int i = 0; i < bloomDay.size(); i++){
            while(i < bloomDay.size() && bloomDay[i] <= mid){
                total++;
                i++;
            } 
            count_bouquet += total / k;
            total = 0;
            if(count_bouquet >= m) return true;
        }
        return false;
    }
};
