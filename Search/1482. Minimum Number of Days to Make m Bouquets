方法一：暴力。遍历每个bloomDay[i]作为min_day，看是否能摘到 m 束花。 时间复杂度O(n^2)
方法二：二分法。先对bloomDay排序，然后二分地找bloomDay[i]作为min_day，看是否能摘到 m 束花。 时间复杂度O(nlogn)
如果mid天满足，那么mid+1天也满足，满足单调性，可以二分check
对于当前天数mid，贪心计算有多少个连续的小于等于mid的k天，假设有cnt个连续k天，判断cnt是否大于等于m即可

class Solution {
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        if(bloomDay.size() < m * k) return -1;
         vector<int> days(bloomDay);
        sort(days.begin(), days.end());
        int l = 0; int r = days.size();
        while(l < r){
            int mid = l + (r - l) / 2;
            bool can = canFlower(bloomDay, m, k, days[mid]);
            if(can){
                r = mid;
            }else {
                l = mid + 1;
            }
        }
        return days[l];
    }
    bool canFlower(vector<int>& bloomDay, int m, int k, int mid){
        int total = 0; int count_bouquet = 0;
        for(int i = 0; i < bloomDay.size(); i++){
            while(i < bloomDay.size() && bloomDay[i] <= mid){
                total++;
                i++;
            } 
            count_bouquet += total / k;
            total = 0;
            if(count_bouquet >= m) return true;
        }
        return false;
    }
};
