//DFS
public:
    vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {};
        
        vector<vector<char>> d(10);
        d[0] = {' '};
        d[1] = {};
        d[2] = {'a','b','c'};
        d[3] = {'d','e','f'};
        d[4] = {'g','h','i'};
        d[5] = {'j','k','l'};
        d[6] = {'m','n','o'};
        d[7] = {'p','q','r','s'};
        d[8] = {'t','u','v'};
        d[9] = {'w','x','y','z'};
        string cur;
        vector<string> ans;
        dfs(digits, d, 0, cur, ans);
        return ans;
    }
private:
    void dfs(const string& digits, 
             const vector<vector<char>>& d, 
             int l, string& cur, vector<string>& ans) {
        if (l == digits.length()) {
            ans.push_back(cur);
            return;
        }
        
        for (const char c : d[digits[l] - '0']) {
            cur.push_back(c);
            dfs(digits, d, l + 1, cur, ans);
            cur.pop_back();
        }
    }
//BFS
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.size() < 1) return  res;
        unordered_map<char, vector<string>> map;
        map['2'] = {"a", "b", "c"};
        map['3'] = {"d", "e", "f"};
        map['4'] = {"g", "h", "i"};
        map['5'] = {"j", "k", "l"};
        map['6'] = {"m", "n", "o"};
        map['7'] = {"p", "q", "r", "s"};
        map['8'] = {"t", "u", "v"};
        map['9'] = {"w", "x", "y", "z"};
        res = map[digits[0]];
        for(int i = 1; i < digits.size(); i++){
            int n = res.size();
            char cur = digits[i];
            vector<string> tmp;
            for(int j = 0; j < n; j++){
                for(string c : map[cur]){
                    string str = res[j] + c;
                    tmp.push_back(str);
                }
            }
            res = tmp;
        }
        return res;
    
