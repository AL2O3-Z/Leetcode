class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        queue<pair<int,int>> q;
        
        int fresh = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 2) q.push({i, j});
                else if(grid[i][j] == 1) fresh ++;
            }
        }
        int dir[] = {1, 0, -1, 0, 1};
        
        while(!q.empty() && fresh) {
            int size = q.size();
            while(size--) {
                auto cur = q.front(); q.pop();
                int x = cur.first;
                int y = cur.second;
                for(int j = 0; j < 4; j++) {
                    int xx = x + dir[j];
                    int yy = y + dir[j + 1];
                    if(xx < 0 || yy < 0 || xx >= m || yy >= n || grid[xx][yy] != 1) continue;
                    grid[xx][yy] = 2;
                    fresh--;
                    q.push({xx, yy});
                }
            }
            res++;
        }
        return fresh ? -1 : res;
    }
    
};
