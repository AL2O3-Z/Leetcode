//Binary Search
//抽屉原理：桌上有十个苹果，要把这十个苹果放到九个抽屉里，无论怎样放，我们会发现至少会有一个抽屉里面放不少于两个苹果。
//这个题限制在 1. 不能改变数组， 2. 使用O(1) 空间
一般解决重复元素问题的思路就是：
a，哈希表去重，违反2原则
b，把数组排序，相邻两个相同，则为重复，违反1原则
c，使用LC41 原地哈希，当两个数发现要放在同一个位置，就为重复元素，违反1原则
d，要定位数，刚好是一个整数，可以在整数的有效范围内做二分查找，但是要重复看整个数组
e，快慢指针，判断环的入口位置
二分法思路 ： 在有效范围内取中值，在数组内遍历，如果小于等于中值，计数加一，根据抽屉远离，如果个数严格大于中值，那么重复值在这个区间内，否则在另一半区间内。
通过这道题可以知道 ：二分法可以确定一个有范围的整数
int findDuplicate(vector<int>& nums) {
        int l = 1, r = nums.size();
        while(l < r){
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for(const auto i : nums){
                if(i <= mid) cnt++;
            }
            if(cnt > mid){
                r = mid;
            }else l = mid + 1;
        }
        return l;
}
//Slow-Fast pointers
我们知道快慢指针可以检测是否有环，这道题把下标当做指向下一个元素的指针，这种技巧用在数组中的提前是元素符合[0-n]类似的规律，
快慢指针的相遇点一定在环内，设慢指针走了m步，快指针则走了2m步，起点到环入口是l， 环周长为c。这多走的m步都在环中，即m%c == 0
当快慢指针相遇时，慢指针在环内的步数为m - l。再走l步即可到达入口处，因为m%c == 0；
因为不知道m的长度，所以再用一个指针从起点和它一起走。当二者相遇的时候，即为到达入口处

int findDuplicate(vector<int>& nums) {
    int slow = 0;
    int fast = 0;
    while(true){
        slow = nums[slow];
        fast = nums[nums[fast]];
        if(slow == fast) break;
    }
    int find = 0;
    while(slow != find){
        slow = nums[slow];
        find = nums[find];
    }
    return find;
}
