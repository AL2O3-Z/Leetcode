class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        
        if(matrix.empty()) return matrix;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, INT_MAX - 1));
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int,int>> q;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] == 0) {
                    q.push({i, j});
                    res[i][j] = 0;
                    visited[i][j] = 1;
                } 
                
            }
        }
        int dir[] = {1, 0, -1, 0, 1};
        while(!q.empty()) {
            int cnt = q.size();
            while(cnt--) {
                auto cur = q.front(); q.pop();
                for(int i = 0; i < 4; i++) {
                    int x = cur.first + dir[i];
                    int y = cur.second + dir[i + 1];
                    if(x < 0 || y < 0 || x >= m || y >= n || visited[x][y]) continue;
                    res[x][y] = res[cur.first][cur.second] + 1;
                    visited[x][y] = 1;
                    q.push({x, y});
                }
                
            }
        }
        return res;
    }
};
