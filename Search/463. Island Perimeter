//dfs solution
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m = grid.size();
        if(!m) return 0;
        int n = grid[0].size();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1)
                    return getPerimetre(grid, i, j);
            }
        }
        return 0;
    }
    
    int getPerimetre(vector<vector<int>>& grid, int i, int j){
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()) return 1;
        if(grid[i][j] == 0) return 1;
        if(grid[i][j] == -1) return 0;
        int count = 0;
        grid[i][j] = -1;
        count += getPerimetre(grid, i, j-1);
        count += getPerimetre(grid, i, j+1);
        count += getPerimetre(grid, i-1, j);
        count += getPerimetre(grid, i+1, j);
        return count;
    }
};
//
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int count=0, repeat=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0; j<grid[i].size();j++){
                if(grid[i][j]==1){
                    count ++;
                    if(i!=0 && grid[i-1][j] == 1) repeat++;
                    if(j!=0 && grid[i][j-1] == 1) repeat++;
                }
            }
        }
        return 4*count-repeat*2;
    }
};
