//priority_queue with reload compare
class Solution {
    struct compare {
        bool operator()(const ListNode* l, const ListNode* r) {
            return l->val > r->val;
        }
    };

public:
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        priority_queue<ListNode *, vector<ListNode *>, compare> q;
        for (auto l : lists) 
            if (l)
                q.push(l);
                
        ListNode* dummy = new ListNode(0);     
        ListNode* tail=dummy;
        while (!q.empty()) {
            tail->next = q.top();
            q.pop();
            tail = tail->next;
            if (tail->next) {
                q.push(tail->next);
            }
        }

        return dummy->next;
    }
};
//inuitive solution
ListNode* mergeKLists(vector<ListNode*>& lists) {
    int n = lists.size();
    ListNode dummy(INT_MIN);
    ListNode* cur = &dummy;
    ListNode* head = &dummy;
    int count = 0;
    while(count < n){
        count = 0;
        for(int i = 0; i < n; i++){
            if(lists[i] == nullptr){
                count++;
                continue;
            }
            ListNode* tmp = lists[i];
            lists[i] = tmp->next;
            tmp->next = nullptr;
            if(cur->val <= tmp->val){
                cur->next = tmp;
                cur = cur->next;
            }else {
                cur = head;
                while(cur->next && cur->next->val < tmp->val){
                    cur = cur->next;
                }
                if(cur->val <= tmp->val){
                    ListNode* m = cur->next;
                    cur->next = tmp;
                    tmp->next = m;
                } else {
                    while(cur && cur->val > tmp->val){
                        swap(cur->val, tmp->val);
                        if(!cur->next) break;
                        cur = cur->next;
                    }
                    cur->next = tmp;
                }
                while(cur->next) cur = cur->next;
            }
            
        }
    }
    return dummy.next;
   }
   //
       ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode dummy(INT_MIN);
        ListNode* cur = &dummy;
        int n = lists.size();
        int count = 0;
        while(count < n){
            count = 0;
            ListNode* little;
            int value = INT_MAX;
            int index = 0;
            for(int i = 0; i < lists.size(); i++){
                if(lists[i] == nullptr){
                    count++;
                    continue;
                }
                if(lists[i]->val < value){
                    little = lists[i];
                    index = i;
                    value = lists[i]->val;
                } 
            }
            if(value != INT_MAX){
                lists[index] = little->next;
                little->next = nullptr;
                cur->next = little;
                cur = cur->next;
            }
            
        }
        return dummy.next;
    }
