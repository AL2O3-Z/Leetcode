class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char,int> need, windows;
        for (char c : t) need[c]++;
        int left = 0, right = 0;
        int start = 0, len = INT_MAX;
        int valid = 0;
        
        while (right < s.size()) {
            
            char c = s[right++];
            if (need.count(c)) {
                windows[c]++;
                if (windows[c] == need[c]) valid++;
            }
            while (valid == need.size()) {
                if (right - left < len) {
                    start = left;
                    len = right - left;
                }
                char remove = s[left];
                left++;
                if (need.count(remove)) {
                    if (windows[remove] == need[remove]) valid--;
                    windows[remove]--;
                }
            }
        }
        return len == INT_MAX ? "" : s.substr(start, len);
    }
};
