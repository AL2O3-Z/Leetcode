//O(n)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int arr[128];
        memset(arr, 0, sizeof(arr));
        int left = 0, right = 0;
        int res = 0;
        for (int i = 0; i < s.size(); i++) {
            char c = s[i];
            if (!arr[c]) {
                arr[c] = 1;
            } else {
                while (left < i && s[left] != c ) {
                    arr[s[left]] = 0;
                    left++;                    
                }
                left++;
            }
            res = max(res, i - left + 1);
        }
        return res;
    }
};
//
int lengthOfLongestSubstring(string s) {
        int res = 0;
        int last = 0;
        unordered_map<int,int> map;
        for(int i = 0; i < s.length(); i++){
            if(!map.count(s[i])){
                map[s[i]] = i;
            }else{
                if(map[s[i]] >= last) last = map[s[i]] + 1;
                map[s[i]] = i;
            }
            res = max(res, i - last + 1);
        }
        return res;
    }
