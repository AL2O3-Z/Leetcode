//Union Find
class Solution {
public:
    int find(int n) {
        if(p[n] != n) p[n] = find(p[n]);
        return p[n];
    }
    void unionFind(int v, int u) {
        int rootV = find(v);
        int rootU = find(u);
        if(rootV == rootU) return;
        if(rank[rootV] > rank[rootU]) {
            p[rootU] = rootV;
        } else if (rank[rootV] < rank[rootU]) {
            p[rootV] = rootU;
        } else {
            p[rootV] = rootU;
            rank[rootU]++;
        }
    }
    int findCircleNum(vector<vector<int>>& M) {
        int size = M.size();
        p = vector<int>(size, 0);
        rank = vector<int>(size, 1);
        for(int i = 0; i < size; i++) {
            p[i] = i;
        }
        for(int i = 0; i < size; i++) {
            for(int j = 0; j < size; j++) {
                if(M[i][j]) unionFind(i, j);
            }
        }
        unordered_set<int> s;
        for(int i = 0; i < p.size(); i++) {
            s.insert(find(p[i]));
        }
        return s.size();
    }
private :
    vector<int> p;
    vector<int> rank;
};
