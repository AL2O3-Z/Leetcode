binary search +  dfs => guess a number, in this path, no value is larger than this number
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        int left = 0, right = n * n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            vector<vector<int>> visited(n, vector<int>(n, 0));
            if (hasPath(grid, mid, 0, 0, visited)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    bool hasPath(vector<vector<int>>& grid, int time, int x, int y, vector<vector<int>>& visited) {
        if (grid[x][y] > time) return false;
        vector<int> dir = {1, 0, -1, 0, 1};
        int n = grid.size();
        visited[x][y] = 1;
        for (int k = 0; k < 4; k++) {
            int i = x + dir[k];
            int j = y + dir[k + 1];
            if (i >= 0 && j >= 0 && i < n && j< n && grid[i][j] <= time && !visited[i][j]) {
                if (i == n - 1 && j == n - 1) return true;
                if (hasPath(grid, time, i, j, visited)) return true;
            } 
        }
        return false;
    }
};


//Dijstra => every path passing one tag cost more than this value. so we can use dijstra to calcute this mininum distance in which we can reach the botton-right
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        int n = grid.size();
        int res = max(grid[0][0], grid[n - 1][n - 1]);
        pq.push({grid[0][0], 0, 0});
        vector<int> dir = {1, 0, -1, 0, 1};
        vector<vector<int>> visited(n, vector<int>(n, 0));
        visited[0][0] = 1;
        while (!pq.empty()) {
            auto cur = pq.top(); pq.pop();
            res = max(res, cur[0]);
           
            for (int i = 0; i < 4; i++) {
                int x = cur[1] + dir[i];
                int y = cur[2] + dir[i + 1];
                if (x < 0 || y < 0 || y >= n || x >= n || visited[x][y]) continue;
                if (x == n - 1 && y == n - 1) return res;
                pq.push({grid[x][y], x, y});
                visited[x][y] = 1;
            }
        }
        return 0;
    }
};
UF = > go through the tag value from 0, if at one tag, the position of botton-right is in the same connection component, that is what we want.
and there is a detail, we must union the tag value smaller than 2 tag value, if in this moment, they are connected, return last time.
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        int left = 0, right = n * n;
        p = vector<int>(n * n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                p[i * n + j] = i * n + j;
                idx[grid[i][j]] = i * n + j;
            }
        }
        return isReacheable(n * n, grid);
    }
    int isReacheable(int time, vector<vector<int>>& grid) {
        int n = grid.size();
        int t = 1;
        int i = idx[0] / n, j = idx[0] % n;
        vector<int> dir = {1, 0, -1, 0, 1};
        while (t <= time) {
            for (int k = 0; k < 4; k++) {
                int x = i + dir[k];
                int y = j + dir[k + 1];
                if (x < 0 || y < 0 || x >= n || y >= n) continue;
                if (grid[i][j] - grid[x][y] > 1) {
                    unionFind(x * n + y, i * n + j);
                    if(isConnected(0, n * n - 1)) return t - 1;
                }
            }
            for (int k = 0; k < 4; k++) {
                int x = i + dir[k];
                int y = j + dir[k + 1];
                if (x < 0 || y < 0 || x >= n || y >= n) continue;
                if (x == idx[(t)] / n && y == idx[(t)] % n)  {
                    unionFind(i * n + j, x * n + y);
                    if(isConnected(0, n * n - 1)) return t;
                }
            }
            i = idx[t] / n, j = idx[t] % n;
            
            t++;
        }
        return 0;
    }
    bool isConnected(int a, int b) {
        int roota = find(a);
        int rootb = find(b);
        if (roota == rootb) return true;
        else return false;
    }
    void unionFind(int a, int b) {
        int roota = find(a);
        int rootb = find(b);
        if (roota == rootb) return;
        p[roota] = rootb;
    }
    int find(int a) {
        if (p[a] != a) {
            p[a] = find(p[a]);
        }
        return p[a];
    }
private :
    vector<int> p;
    unordered_map<int, int> idx; // nums[i] : idx;
};
