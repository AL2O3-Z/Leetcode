//Two pass using map
class Solution {
public:
    void sortColors(vector<int>& nums) {
        map<int, int> map;
        for(int i : nums) map[i]++;
        int i = 0;
        for(auto& m : map){
            while(m.second){
                nums[i] = m.first;
                m.second--;
                i++;
            }
        }
    }
};

//One pass but time O(n^2)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int r = 0;
        for(int i = 0; i < nums.size(); i++){
            r = i + 1;
            while(r < nums.size()){
                if(nums[i] > nums[r]) swap(nums[i], nums[r]);
                r++;
            }
        }
    }
};
//One pass Time O(n) with two pointer pointing to index of 0 and 2;
void sortColors(vector<int>& nums) {
        int r = 0,b = nums.size()-1;
        int i = 0;
        while(i <= b){
            if(nums[i] == 0){
                swap(nums[i], nums[r]);
                r++;
                i++;
            }else if(nums[i] == 2){
                swap(nums[i], nums[b]);
                b--;
            }else{
                i++;
            }
        }
    }
//One pass Time O(n) but with more elements
解法二中总共有三种数，然后很自然可以分成三部分，用两个指针作为间隔，但是，如果有 5 种数呢，解法二恐怕就不适用了。用了大问题化小的思想。

我们用三个指针 n0，n1，n2，分别代表已排好序的数组当前 0 的末尾，1 的末尾，2 的末尾。

0  0  1  2  2  2  0  2  1
   ^  ^        ^  ^
  n0 n1       n2  i
Copy
然后当前遍历到 i 的位置，等于 0，我们只需要把 n2 指针后移并且将当前数字置为 2，将 n1 指针后移并且将当前数字置为 1，将 n0 指针后移并且将当前数字置为 0。

0  0  1  2  2  2  2  2  1  n2 后移后的情况 
   ^  ^           ^  
   n0 n1          i
                  n2  

0  0  1  1  2  2  2  2  1  n1 后移后的情况
   ^     ^        ^  
   n0    n1       i
                  n2                   

0  0  0  1  2  2  2  2  1  n0 后移后的情况
      ^  ^        ^  
      n0 n1       i
                  n2

然后就达到了将 i 指向的 0 插入到当前排好序的 0 的位置的末尾。

原因的话，由于前边插入了新的数字，势必造成数字的覆盖，指针后移后要把对应的指针位置置为对应的数，n2 指针后移后置为 2，n1 指针后移后置为 1，例如，假如之前有 3 个 2，由于前边插入一个数字，所以会导致 1 个 2 被覆盖掉，所以要加 1 个 2。

public void sortColors(int[] nums) {
    int n0 = -1, n1 = -1, n2 = -1;
    int n = nums.length;
    for (int i = 0; i < n; i++) {
        if (nums[i] == 0) {
            n2++;
            nums[n2] = 2;
            n1++;
            nums[n1] = 1;
            n0++;
            nums[n0] = 0;
        } else if (nums[i] == 1) {
            n2++;
            nums[n2] = 2;
            n1++;
            nums[n1] = 1;
        } else if (nums[i] == 2) {
            n2++;
            nums[n2] = 2;
        }
    }
}
时间复杂度：O（n）。空间复杂度：O（1）。
