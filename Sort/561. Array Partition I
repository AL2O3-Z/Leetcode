//Time O(nlogn)
int arrayPairSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int res = 0;
        for(int i = 0; i < nums.size(); i+=2){
            res += nums[i];
        }
        return res;
}
//Time O(n) bucket sort
int arrayPairSum(vector<int>& nums) {
        vector<int> bucket(20001,0);
        int res = 0;
        for(int i : nums) bucket[i+10000]++;
        int count = 0, i = 0;
        while(count < nums.size()){
            if(bucket[i] == 0) i++;
            else{
                count++;
                if(count%2 == 1) res += i - 10000;
                bucket[i]--;
            }
        }
        return res;
}
//To optimise the time, we don't need extra buckets before and after the min and max value.
//Time O(n) counting sort
// Author: Huahua
class Solution {
public:
  int arrayPairSum(vector<int>& nums) {
    const int max_val = *max_element(begin(nums), end(nums));
    const int min_val = *min_element(begin(nums), end(nums));
    const int offset = -min_val;
    vector<int> c(max_val - min_val + 1);
 
    for (int num : nums) ++c[num + offset];
		
    int ans = 0;
    int index = 0;
    int n = min_val;
    while (n <= max_val) {
      if (c[n + offset] == 0) {
        ++n;
        continue;
      }
      ans += (++index & 1) ? n : 0;
      --c[n + offset];
    }
    return ans;
  }
};
