// SOLUTION BFS
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        if(!root) return res;
        q.push(root);
        //res.push([root->val]);
        while(!q.empty()){
            vector<int> levelNode;
            auto size = q.size();
            std::cout<<q.size()<<endl;
            for(int i=0; i < size; i++){
                TreeNode* cur = q.front(); q.pop();
                levelNode.push_back(cur->val);
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
            res.push_back(levelNode);
        }
        reverse(res.begin(), res.end());
        return res;
}
