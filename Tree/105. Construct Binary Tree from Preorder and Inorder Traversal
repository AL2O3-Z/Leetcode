TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return buildTreeHelper(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
    }
    TreeNode* buildTreeHelper(vector<int>& preorder, int ps, int pe, vector<int>& inorder, int is, int ie){
        if(ps > pe) return nullptr;
        TreeNode* root = new TreeNode(preorder[ps]);
        int pos = 0;
        for(int i = 0; i < inorder.size(); i++){
            if(inorder[i] == preorder[ps]){
                pos = i;
                break;
            } 
        }
        root->left = buildTreeHelper(preorder, ps+1, ps+pos-is, inorder, is, pos-1);
        root->right = buildTreeHelper(preorder, ps+pos-is+1, pe, inorder, pos+1, ie);
        return root;
}
