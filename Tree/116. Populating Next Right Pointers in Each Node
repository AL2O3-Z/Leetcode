Node* connect(Node* root) {
        if(!root) return nullptr;
        if(root->left) root->left->next = root->right;
        if(root->right && root->next) root->right->next = root->next->left;
        connect(root->left);
        connect(root->right);
        return root;
    }
    //20s
    //profiter la relation cur->next pour Ã©conomiser extra space et move on to the next point at the same level
    //Node* connect(Node* root) {
    //    Node* start = root;
    //    while(start){
    //        Node* cur = start;
    //        while(cur){
    //            if(cur->left) cur->left->next = cur->right;
    //            if(cur->right && cur->next) cur->right->next = cur->next->left;
    //            cur = cur->next;
    //        }
    //        start = start->left;
    //    }
    //    return root;
    //}
    //60s
    //Node* connect(Node* root) {
    //    if(!root) return nullptr;
    //    queue<Node*> q;
    //    q.push(root);
    //    while(!q.empty()){
    //        int n = q.size();
    //        for(int i = 0; i < n; i++){
    //            Node* cur = q.front();
    //            q.pop();
    //            if(i != n-1) cur->next = q.front();
    //            if(cur->left) q.push(cur->left);
    //            if(cur->right) q.push(cur->right);
    //        }
    //    }
    //    return root;
    //}
