TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> map;
        for(int i = 0; i < inorder.size(); i++){
            map[inorder[i]] = i;
        }
        return buildTreeHelper(map, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }
    TreeNode* buildTreeHelper(unordered_map<int,int>& map, int is, int ie, vector<int>& postorder, int ps, int pe){
        if(is > ie || ps > pe) return nullptr;
        TreeNode* root = new TreeNode(postorder[pe]);
        int pos = map[postorder[pe]];
        root->left = buildTreeHelper(map, is, pos-1, postorder, ps, ps+pos-is-1);
        root->right = buildTreeHelper(map, pos+1, ie, postorder, ps+pos-is, pe-1);
        return root;
}
